{"version":3,"sources":["store/modules/categories/Categories.types.ts","store/modules/joke/Joke.types.ts","store/modules/categories/Categories.actions.ts","store/modules/joke/Joke.actions.ts","routes.tsx","shared/Loading/Loading.tsx","store/modules/categories/Categories.reducer.ts","store/modules/joke/Joke.reducer.ts","store/modules/rootReducer.ts","services/api.ts","store/modules/categories/Categories.sagas.ts","store/modules/joke/Joke.sagas.ts","store/modules/rootSaga.ts","store/index.ts","App.tsx","index.tsx"],"names":["CategoriesTypes","JokeTypes","loadRequest","action","LOAD_REQUEST","loadSuccess","data","LOAD_SUCCESS","loadFailure","LOAD_FAILURE","category","LOAD_JOKE_REQUEST","LOAD_JOKE_SUCCESS","LOAD_JOKE_FAILURE","ROUTES","HOME","JOKE","Home","lazy","Joke","Routes","fallback","path","exact","component","Button","className","INITIAL_STATE","loading","error","reducer","state","type","payload","combineReducers","categories","joke","api","axios","create","baseURL","loadCategories","call","get","response","put","loadJoke","value","rootSaga","all","takeLatest","sagaMiddleware","createSagaMiddleware","store","createStore","rootReducer","applyMiddleware","run","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.00098172.chunk.js","sourcesContent":["// ACTION TYPES\r\nexport enum CategoriesTypes {\r\n  LOAD_REQUEST = \"LOAD_REQUEST\",\r\n  LOAD_SUCCESS = \"LOAD_SUCCESS\",\r\n  LOAD_FAILURE = \"LOAD_FAILURE\",\r\n}\r\n\r\n// STATE TYPES\r\nexport interface CategoriesState {\r\n  readonly data: string[];\r\n  readonly loading: boolean;\r\n  readonly error: boolean;\r\n}","// ACTION TYPES\r\nexport enum JokeTypes {\r\n  LOAD_JOKE_REQUEST = \"LOAD_JOKE_REQUEST\",\r\n  LOAD_JOKE_SUCCESS = \"LOAD_JOKE_SUCCESS\",\r\n  LOAD_JOKE_FAILURE = \"LOAD_JOKE_FAILURE\",\r\n}\r\n\r\n// DATA TYPES\r\nexport interface JokeProps {\r\n  type: typeof JokeTypes.LOAD_JOKE_REQUEST;\r\n  payload: string\r\n}\r\n\r\n// STATE TYPES\r\nexport interface JokeState {\r\n  readonly data: string[];\r\n  readonly loading: boolean;\r\n  readonly error: boolean;\r\n}","import { action } from 'typesafe-actions';\r\nimport { CategoriesTypes } from \"./Categories.types\";\r\n\r\nexport const loadRequest = () => action(CategoriesTypes.LOAD_REQUEST);\r\n\r\nexport const loadSuccess = (data: string[]) => action(CategoriesTypes.LOAD_SUCCESS, data);\r\n\r\nexport const loadFailure = () => action(CategoriesTypes.LOAD_FAILURE);\r\n","import { action } from 'typesafe-actions';\r\nimport { JokeTypes } from \"./Joke.types\";\r\n\r\nexport const loadRequest = (category: string) => action(JokeTypes.LOAD_JOKE_REQUEST, category);\r\n\r\nexport const loadSuccess = (data: string[]) => action(JokeTypes.LOAD_JOKE_SUCCESS, data);\r\n\r\nexport const loadFailure = () => action(JokeTypes.LOAD_JOKE_FAILURE);\r\n","import React, { lazy, Suspense } from 'react';\r\nimport Loading from './shared/Loading/Loading';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch, \r\n  Route \r\n} from 'react-router-dom';\r\n\r\nexport const ROUTES = {\r\n  HOME: '/',\r\n  JOKE: '/joke'\r\n}\r\n\r\nconst Home = lazy(() => import('./views/home/Home'));\r\nconst Joke = lazy(() => import('./views/joke/Joke'));\r\n\r\nconst Routes = () => (\r\n  <Router>\r\n    <Suspense fallback={(<Loading />)}>\r\n      <Switch>\r\n        <Route path={ ROUTES.HOME } exact component={ Home } />\r\n        <Route path={ `${ROUTES.JOKE}/:category` } exact component={ Joke } />\r\n        <Route path=\"*\" component={ Home }\r\n        />\r\n      </Switch>\r\n    </Suspense>\r\n  </Router>\r\n);\r\n\r\nexport default Routes;\r\n","import React from 'react';\r\n\r\nimport './Loading.style.scss';\r\n\r\nconst Button: React.FC = () => {\r\n  return (\r\n    <div className=\"app-loading\">\r\n      <div className=\"app-loading__loader\">\r\n        <div></div>\r\n        <div></div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Button;\r\n","import { Reducer } from \"redux\";\r\nimport { CategoriesState, CategoriesTypes } from \"./Categories.types\";\r\n\r\nconst INITIAL_STATE: CategoriesState = {\r\n  data:    [],\r\n  loading: false,\r\n  error:   false\r\n};\r\n\r\nconst reducer: Reducer<CategoriesState> = (state = INITIAL_STATE, action) => {\r\n  switch( action.type ) {\r\n    case CategoriesTypes.LOAD_REQUEST:\r\n      return { ...state, loading: true };\r\n\r\n    case CategoriesTypes.LOAD_SUCCESS:\r\n      return { ...state, loading: false, error: false, data: action.payload };\r\n\r\n    case CategoriesTypes.LOAD_FAILURE:\r\n      return { ...state, loading: false, error: true, data: [] };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport default reducer;\r\n","import { Reducer } from \"redux\";\r\nimport { JokeState, JokeTypes } from \"./Joke.types\";\r\n\r\nconst INITIAL_STATE: JokeState = {\r\n  data:    [],\r\n  loading: false,\r\n  error:   false\r\n};\r\n\r\nconst reducer: Reducer<JokeState> = (state = INITIAL_STATE, action) => {\r\n  switch( action.type ) {\r\n    case JokeTypes.LOAD_JOKE_REQUEST:\r\n      return { ...state, loading: true };\r\n\r\n    case JokeTypes.LOAD_JOKE_SUCCESS:\r\n      return { ...state, loading: false, error: false, data: action.payload };\r\n\r\n    case JokeTypes.LOAD_JOKE_FAILURE:\r\n      return { ...state, loading: false, error: true, data: [] };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport default reducer;\r\n","import { combineReducers } from \"redux\";\r\n\r\nimport categories from \"./categories/Categories.reducer\";\r\nimport joke       from \"./joke/Joke.reducer\";\r\n\r\nexport default combineReducers({\r\n  categories,\r\n  joke\r\n});\r\n","import axios from 'axios';\r\n\r\nconst api = axios.create({\r\n  baseURL: 'https://api.chucknorris.io/jokes'\r\n})\r\n\r\nexport default api;\r\n","import { call, put } from 'redux-saga/effects';\r\nimport api from '../../../services/api';\r\n\r\nimport { loadSuccess, loadFailure } from './Categories.actions';\r\n\r\nexport function* loadCategories() {\r\n  try {\r\n    const response = yield call( api.get, 'categories' );\r\n\r\n    yield put(loadSuccess(response.data));\r\n  } catch (err) {\r\n    yield put(loadFailure());\r\n  }\r\n}\r\n","import { call, put } from 'redux-saga/effects';\r\nimport api from '../../../services/api';\r\n\r\nimport { loadSuccess, loadFailure } from './Joke.actions';\r\nimport { JokeProps } from './Joke.types';\r\n\r\nexport function* loadJoke({ payload }: JokeProps) {\r\n  try {\r\n    const response = yield call( api.get, `random?category=${payload}` );\r\n    \r\n    yield put(loadSuccess(response.data.value));\r\n  } catch (err) {\r\n    yield put(loadFailure());\r\n  }\r\n}\r\n","import { all, takeLatest } from \"redux-saga/effects\";\r\n\r\nimport { CategoriesTypes } from './categories/Categories.types';\r\nimport { loadCategories }  from './categories/Categories.sagas';\r\n\r\nimport { JokeTypes } from './joke/Joke.types';\r\nimport { loadJoke }  from './joke/Joke.sagas';\r\n\r\nexport default function* rootSaga() {\r\n  yield all([\r\n    takeLatest(CategoriesTypes.LOAD_REQUEST, loadCategories),\r\n    takeLatest(JokeTypes.LOAD_JOKE_REQUEST, loadJoke)\r\n  ])\r\n}\r\n","import { Store, createStore, applyMiddleware } from \"redux\";\r\nimport createSagaMiddleware from \"redux-saga\";\r\n\r\nimport rootReducer from \"./modules/rootReducer\";\r\nimport rootSaga    from \"./modules/rootSaga\";\r\n\r\nimport { CategoriesState } from './modules/categories/Categories.types';\r\nimport { JokeState }       from './modules/joke/Joke.types';\r\n\r\nexport interface ApplicationState {\r\n  categories: CategoriesState\r\n  joke: JokeState\r\n}\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\nconst store: Store<ApplicationState> = createStore(rootReducer, applyMiddleware(sagaMiddleware));\r\n\r\nsagaMiddleware.run(rootSaga);\r\n\r\nexport default store;\r\n","import React  from 'react';\r\nimport Routes from './routes';\r\nimport { Provider } from 'react-redux';\r\nimport store from './store'\r\n\r\nimport './config/styles/theme.global.scss';\r\n\r\nconst App = () => {\r\n  return (\r\n    <Provider store={ store }>\r\n      <Routes />\r\n    </Provider>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}